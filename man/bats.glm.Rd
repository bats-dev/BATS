% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm.R
\name{bats.glm}
\alias{bats.glm}
\title{BATS for generalised linear models}
\usage{
bats.glm(
  model,
  var,
  var.control = NULL,
  family = "gaussian",
  link = "identity",
  beta,
  which,
  alternative = "greater",
  R = 10000,
  N,
  interim,
  prob0,
  delta.eff = 0,
  delta.fut = delta.eff,
  delta.RAR = 0,
  eff.arm,
  eff.arm.control = NULL,
  eff.trial = NULL,
  eff.trial.control = NULL,
  fut.arm,
  fut.arm.control = NULL,
  fut.trial = NULL,
  fut.trial.control = NULL,
  RAR = NULL,
  RAR.control = NULL,
  H0 = TRUE,
  computation = "parallel",
  mc.cores = getOption("mc.cores", 3L),
  extended = 0,
  ...
)
}
\arguments{
\item{model}{A character string indicating a symbolic description of the model to be fitted (as in the lm() and glm() functions).}

\item{var}{A list. Each entry corresponds to a variable described under 'model' and indicates, by means of a character string, how each variable is generated. The list names have to match the variable names as indicated under 'model' and the first list element corresponds to the outcome. The variable corresponding to the 'treatment' has to be a factor with levels corresponding to the names indicated for prob0 (see below).}

\item{var.control}{An optional list of control parameters for functions in 'var'. The names of the list items need to correspond with the names of 'var'. Each element is another list with names of the elements corresponding to the parameter names of the functions specified in 'var'.}

\item{family}{A character string indicating the name of the conditional distribution as described the package INLA. Default set to 'gaussian'.}

\item{link}{A character string describing the link function to be used in the model to relate the outcome to the set of predictors: "identity", "logit" and "log" are the currently available options. Default set to 'identity'.}

\item{beta}{A numerical vector of parameter values for the linear predictor. Its length has to match the number of column of the X matrix induced by the formula indicated under 'model' (check ?model.matrix).}

\item{which}{A numerical vector indicating the position of the target parameters.}

\item{alternative}{The direction of the alternative hypothesis corresponding to each target parameter indicated under 'which'. Possibilities are 'greater' (default) or 'less'. If the vector is of length 1, the same direction will be used for all target parameter tests.}

\item{R}{a scalar corresponding to the number of Monte Carlo trials or a vector of natural numbers to be used as seeds (?set.seed) for the different Monte Carlo trial (the vector length will thus correspond to the number of Monte Carlo trials).}

\item{N}{A scalar indicating the total sample size.}

\item{interim}{A list of parameters related to interim analyses. Currently, only the parameter 'recruited' is available.  It consists in a vector of integers indicating the number of completed observations at each look, last excluded, in increasing order.}

\item{prob0}{A named vector with initial allocation probabilities. Names need to correspond with the levels of the grouping variable.}

\item{delta.eff}{A scalar or vector defining the boundaries for efficacy.}

\item{delta.fut}{A scalar or vector defining the boundaries for futility.}

\item{delta.RAR}{A scalar or vector defining the boundaries for RAR.}

\item{eff.arm}{A character string showing an expression indicating how to evaluate if efficacy has been achieved at a given look given the information (ingredients) available at that stage for a given target parameter. The output of this expression must be logical for each target parameter. Check ?BATS::eff.arm_example for examples.}

\item{eff.arm.control}{A list of parameters for functions in 'eff.arm'}

\item{eff.trial}{A character string showing an expression (a function of ingredient eff.target) indicating if the trial can be stopped for efficacy given the output of the function specified in eff.arm on all parameters. The output of this expression must be a logical of length one. When eff.trial=NULL (default), the trial stops for efficacy when all target parameters are found to be effective. Check ?BATS::eff.trial_example for examples.}

\item{eff.trial.control}{A list of parameters for functions in 'eff.trial'}

\item{fut.arm}{A character string showing an expression indicating how to evaluate if futility has been achieved at a given look given the information (ingredients) available at that stage for a given target parameter. The output of this expression must be a logical for each target parameter. Check ?BATS::fut.arm_example for examples.}

\item{fut.arm.control}{A list of parameters for functions in 'fut.arm'}

\item{fut.trial}{A character string showing an expression (a function of ingredient fut.target) indicating if the trial can be stopped for futility given the output of the function specified in fut.arm on all parameters. The output of this expression must be logical of length one. When fut.trial=NULL (default), the trial stops when all target parameters are found to be futile. Check ?BATS::fut.trial_example for examples.}

\item{fut.trial.control}{A list of parameters for functions in 'fut.trial'}

\item{RAR}{A character string indicating the how the response-adaptive randomised probabilities corresponding to each group, reference group included, are defined. If RAR=NULL, equal probabilities of being attributed to each (active) group are used. Check ?BATS::prob.fun for examples.}

\item{RAR.control}{An optional list of control parameters the function in 'RAR'.}

\item{H0}{A logical indicating whether the simulation should also consider the case with all target parameters set to 0 (or to the first value of par$delta) to check the probability of rejecting the hypothesis that the target parameter value is equal to par$delta individually (type I error when par$delta=0) or globally (FWER when par$delta=0).}

\item{computation}{A character string indicating how to parallelise the task, with possibilities 'parallel' when running this task on a single computer (the option 'cluster' - using the Slurm workload manager - is temporarily removed due to issues with cluster variants of INLA shared objects not being available).}

\item{mc.cores}{An integer indicating how many CPUs to use when computation='parallel' (Default to 3 if no global option was set).}

\item{extended}{an integer indicating the type of results to be returned. 0 (default) provides summary statistics, 1 adds the results of each Monte Carlo trial and 2 additionally returns the each Monte Carlo datasets. BATS::bats.combine requires extended > 0 as the function needs to merge results of different sets of seeds.}

\item{...}{Additional arguments to control fitting in INLA}
}
\value{
The function \link{bats.glm} returns an S3 object of class 'bats.glm' with available print/summary/plot functions.
}
\description{
Simulation of Bayesian adaptive trials with GLM endpoint using INtegrated Laplace Approximation (INLA).
}
\examples{
\dontrun{
# Example: fixed efficacy (0.975) and futility (0.05) stops, no RAR, 
           3 groups with group means C = 1 (ref), T1 = 2, T2 = 3, 
           Gaussian conditional distribution with sigma = 2, 6 looks.

sim = bats.glm(  
               model            = y ~ group,   
               var              = list(y     = rnorm,
                                       group = alloc.balanced),
               var.control      = list(y = list(sd = 5)),
               beta             = c(1, 1, 2),
               which            = c(2:3),
               R                = 25,
               alternative      = "greater",
               N                = 200,
               interim          = list(recruited = seq(100, 180, 20)),
               prob0            = c(C = 1/3, T1 = 1/3, T2 = 1/3),
               eff.arm          = eff.arm.simple,
               eff.arm.control  = list(b = 0.975),
               fut.arm          = fut.arm.simple,
               fut.arm.control  = list(b = 0.05),
               computation      = "parallel",
               H0               = TRUE,
               mc.cores         = parallel::detectCores()-1)
}
}
